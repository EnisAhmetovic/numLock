using namespace std;
#include <wchar.h>
typedef wchar_t Name[500];
#include <string>
#include <sstream>
#include <fstream>
#include <iostream>
COMPILER numLock
#include "methods.inc"
std::wstring ParseList;
int scopepos;

CHARACTERS
  cifre = "0123456789".
  pcifre = "123456789".
  nula = "0".
  wr  = '\r'.
  nr  = '\n'.

TOKENS
  ident  = nula nula pcifre {cifre}.
  broj = pcifre { cifre }.


  COMMENTS FROM ",," TO wr nr

  IGNORE wr + nr



PRODUCTIONS


  numLock = 	(. ParseList=L"(NUMLOCK "; scopepos=0; .)
	{ Definition }  
	EOF 	(. ParseList+=L")"; wstringstream data; wstringstream text;
		text << "%include \"asm_io.inc\"" << endl;		
		text << L"section .text" << endl;
		text << L" global _start" << endl << L"_start:" << endl;
		int iluud=0;
		Compile(0,iluud, text, data); std::wcout<<ParseList;
		std::ofstream myfile("test.asm", std::ofstream::binary);
		text << endl << "section .data" << endl << endl << data.str();	
		wstring ws(&text.str()[0]);
		string stsr(ws.begin(),ws.end());
		myfile.write(&stsr[0],stsr.size());	
		myfile.close(); .) .

  Ident <Name name>
	= ident (. wcscpy(name, t->val); .).

  ConstVal (.Name name; .)
	= (. .)
	 broj (. wcscpy(name, t->val); ParseList.append(L"(BROJ ");
		ParseList.append(name); ParseList.append(L")"); .) .

  Definition  (. Name name; bool isarray; int position;.)
  =  (. isarray=false;.)
  SYNC  (. position=ParseList.length(); .) 
  VarList<isarray> '-' {Statement} .


  VarList<bool & isarray> (. Name name; int position; .) 
	= (. isarray=false; position=ParseList.length(); .) 
      Ident<name> (. if (IsDeclaredGlobal(name))  AlreadyErr(name) ; .)
      [ "/," broj  
                   (. isarray=true; ParseList.append(L"(GARRDEF (NAME "); 
                    ParseList.append(name); ParseList.append(L")(ASIZE "); 
                    ParseList.append(t->val); ParseList.append(L")) ") ; .)
		
      ",/" ]  
	(. ParseList.insert(position,isarray?L"":L"(GVARDEF (NAME ") ; 
	ParseList.append(isarray?L"":(name));
	ParseList.append(isarray?L"":L")) "); .) 
      
	{',' VarList<isarray>  } .
      

  Statement (. int position; .)
  = SYNC (. position=ParseList.length(); .) 
  ( StatementExpression 
                    | IfStatement 
                    | LoopStatement ) .

  CompoundStatement    = '/' (. ParseList.append(L"(BLOCK "); .)
                     { Statement } '/'  (. ParseList.append(L") "); .).

  IfStatement (. int position; bool haselse;.) 
            = (. haselse=false; .)
            "+" (. position=ParseList.length(); .) 
             Expression CompoundStatement [ "++" CompoundStatement  (. haselse=true; .) ] 
            (. ParseList.insert(position,haselse? L"(IFELSE ": L"(IF ");ParseList.append(L")" );  .).

  LoopStatement (. Name name; int position; .)
	= (. position=ParseList.length(); .) 
  "*" (ConstVal | Ident<name> (. if (!IsDeclaredGlobal(name))  UndecErr(name) ; .)
(. ParseList.append(L"(VAR " );ParseList.append(name );ParseList.append(L")" );.)  
	) CompoundStatement  (. ParseList.insert(position, L"(LOOP "); ParseList.append(L")"); .).

  StatementExpression = Expression '-' .

  Expression = AssignmentExp.

  AssignmentExp  (. int position; .)       
        = (. position=ParseList.length(); .) 
        LogANDExp   
        { ("01" AssignmentExp
		(. if(!(Assignable(position))) { SemErr(L"Not assignable");} .)
                (. ParseList.insert(position,L"(MOV " ); .)
                (. ParseList.append(L") " );.)
        | "014" AssignmentExp 
		(. if(!(Assignable(position))) { SemErr(L"Not assignable");} .)
                (. ParseList.insert(position,L"(MULTMOV " ); .)
                (. ParseList.append(L") " );.)
        | "015" AssignmentExp 
		(. if(!(Assignable(position))) { SemErr(L"Not assignable");} .)
                (. ParseList.insert(position,L"(DIVMOV " ); .)
                (. ParseList.append(L") " );.)
        | "012" AssignmentExp 
		(. if(!(Assignable(position))) { SemErr(L"Not assignable");} .)
                (. ParseList.insert(position,L"(ADDMOV " ); .)
                (. ParseList.append(L") " );.)
        | "013" AssignmentExp 
		(. if(!(Assignable(position))) { SemErr(L"Not assignable");} .)
                (. ParseList.insert(position,L"(SUBMOV " ); .)
                (. ParseList.append(L") " );.)
        )}.

  LogANDExp    (. int position; .) 
      = (. position=ParseList.length(); .)
      EqualExp   { "09"  EqualExp 
      (. ParseList.insert(position,L"(AND " ); .)
      (. ParseList.append(L") " );.)}.

  EqualExp     (. int position; .)         
  = (. position=ParseList.length(); .)
   RelationExp { ( "011" RelationExp
                (. ParseList.insert(position,L"(EQU " ); .)
                (. ParseList.append(L") " );.) 
                | "018" RelationExp
                (. ParseList.insert(position,L"(NEQU " ); .)
                (. ParseList.append(L") " );.) ) } .

  RelationExp   (. int position; .)        
  = (. position=ParseList.length(); .)
   AddExp    { ( "06" AddExp
                (. ParseList.insert(position,L"(LESSTHAN " ); .)
                (. ParseList.append(L") " );.)
                | "07" AddExp
                (. ParseList.insert(position,L"(GREATERTHAN " ); .)
                (. ParseList.append(L") " );.)
                | "016" AddExp
                (. ParseList.insert(position,L"(LESSEQUTHAN " ); .)
                (. ParseList.append(L") " );.)
                | "017" AddExp
                (. ParseList.insert(position,L"(GREATEREQUTHAN " ); .)
                (. ParseList.append(L") " );.)) }.

  AddExp      (. int position; .)         
   = (. position=ParseList.length(); .)
   MultExp     { ( "02" MultExp              
                (. ParseList.insert(position,L"(ADD " ); .)
                (. ParseList.append(L") " );.)
                | "03" MultExp                                  
                (. ParseList.insert(position,L"(SUB " ); .)
                (. ParseList.append(L") " );.)) } .

  MultExp    (. int position; .)          
   = (. position=ParseList.length(); .)
   PostFixExp     { ( "04" PostFixExp
                (. ParseList.insert(position,L"(MUL " ); .)
                (. ParseList.append(L") " );.)
                | "05" PostFixExp
                (. ParseList.insert(position,L"(DIV " ); .)
                (. ParseList.append(L") " );.)) } .

  PostFixExp   (. int position; .)        
   = (. position=ParseList.length(); .)
   Primary  { "/," Expression ",/" 
                (. ParseList.insert(position,L"(INDEX " ); .)
                (. ParseList.append(L") " );.) } .

  Primary (. Name name; int position; .)
              = Ident<name>  
(. if (!IsDeclaredGlobal(name))  UndecErr(name) ; .)
(. ParseList.append(L"(VAR " );ParseList.append(name );ParseList.append(L")" );.)
		| ConstVal .


END numLock.
